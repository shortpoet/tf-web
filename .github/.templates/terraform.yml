# name: "Terraform"

# on:
#   # Uncomment to enable staging deploy from main
#   # push:
#   #   branches:
#   #     - main
#   release:
#     types: [published]
#   pull_request:

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     # env:
#     #   AWS_DEFAULT_PROFILE: ${{ vars.AWS_PROFILE }}
#     #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     defaults:
#       run:
#         working-directory: vm/aws
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#           aws-region: ${{ vars.AWS_DEFAULT_REGION }}
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           role-duration-seconds: 1200

#       - name: Terraform Profile
#         id: profile
#         run: |
#           profile=${{ vars.AWS_PROFILE }}
#           aws configure --profile "$profile" set "profile.${profile}.aws_access_key_id" ${{ env.AWS_ACCESS_KEY_ID }}
#           aws configure --profile "$profile" set "profile.${profile}.aws_secret_access_key" ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws configure --profile "$profile" set "profile.${profile}.aws_session_token" ${{ env.AWS_SESSION_TOKEN }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.0.1
#           terraform_wrapper: false

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

#       - name: Terraform Init
#         id: init
#         run: terraform init

#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         # Route 53 zone must already exist for this to succeed!
#         run: terraform plan -no-color
#         # run: terraform plan -var db_pass=${{secrets.DB_PASS }} -no-color
#         continue-on-error: true

#       - uses: actions/github-script@0.9.0
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#             <details><summary>Show Plan</summary>

#             \`\`\`${process.env.PLAN}\`\`\`

#             </details>

#             *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;


#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })

#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1
