---
name: "Terraform Plan"
on:
  workflow_call:
    inputs:
      provider:
        description: 'Specifies the cloud provider.'
        required: true
        type: string
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: null
      # tf_vars_file:
      #   description: 'Specifies the Terraform TFVARS file.'
      #   required: true
      #   type: string
      enable_TFSEC:
        description: '(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations'
        required: false
        type: boolean
        default: false
    # secrets:
    #   arm_client_id:
    #     description: 'Specifies the Azure ARM CLIENT ID.'
    #     required: true
    #   arm_client_secret:
    #     description: 'Specifies the Azure ARM CLIENT SECRET.'
    #     required: true
    #   arm_subscription_id:
    #     description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
    #     required: true
    #   arm_tenant_id:
    #     description: 'Specifies the Azure ARM TENANT ID.'
    #     required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    env:
      TF_LOG: TRACE
      TF_LOG_PATH: tf.log
      TF_IN_AUTOMATION: true
      # TF_VAR_client_id: ${{ secrets.arm_client_id }}
      # TF_VAR_client_secret: ${{ secrets.arm_client_secret }}
      # TF_VAR_subscription_id: ${{ secrets.arm_subscription_id }}
      # TF_VAR_tenant_id: ${{ secrets.arm_tenant_id }}
      # TF_VARS: ${{ inputs.tf_vars_file }}
      # STORAGE_ACCOUNT: ${{ secrets.storage_account }}
      # CONTAINER_NAME: ${{ secrets.container_name }}
      # RESOURCE_GROUP: ${{ secrets.resource_group }}
      # TF_KEY: ${{ secrets.tf_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: AWS Credentials
        if: ${{ inputs.provider == 'aws' }}
        uses: ./.github/actions/aws-creds
        with:
          aws-profile: ${{ vars.AWS_PROFILE }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 1200

      # - name: Scan IaC - tfsec
      #   if: ${{ inputs.ENABLE_TFSEC == 'true' }}
      #   uses: aquasecurity/tfsec-sarif-action@v0.1.4
      #   with:
      #     sarif_file: tfsec.sarif

      # - name: Upload SARIF file
      #   if: ${{ inputs.ENABLE_TFSEC == 'true' }}
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: tfsec.sarif

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: terraform init
        # run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan --out=plan.tfplan
        # run: terraform plan --var-file=$TF_VARS --out=plan.tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Compress TF Plan artifact
        run: zip -r ${{ inputs.gh_environment }}.zip ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: "${{ inputs.gh_environment }}"
          path: "${{ inputs.path }}/${{ inputs.gh_environment }}.zip"
          retention-days: 5
